#!/usr/bin/env bash
# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__root="$(cd "$(dirname "${__dir}")" && pwd)" # <-- change this
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"

arg1="${1:-}"

SERVICES_JAR_NAME="secondary-analysis-services.jar"

SL_PREFIX=sl-analysis
SL_SERVICES_PID=${__root}/${SL_PREFIX}.pid
SL_SERVICES_STDOUT=${__root}/${SL_PREFIX}.stdout
SL_SERVICES_STDERR=${__root}/${SL_PREFIX}.stderr
SL_SERVICES_JVM_ARGS=$(cat ${__root}/services-jvm-args)
SL_SERVICES_LOG_ARGS=$(cat ${__root}/services-log-args)
SL_SERVICES_CONF=${__root}/smrtlink-system-config.json
SL_SERVICES_JAR=${__root}/${SERVICES_JAR_NAME}
SL_SERVICES_TOOLS_DIR=${__root}/tools

export PATH=${SL_SERVICES_TOOLS_DIR}/bin:$PATH

TOMCAT_DIR="$__dir/../apache-tomcat-8.0.26"
WSO2_DIR="$__dir/../wso2am-2.0.0"


# TODO Log locally and globally, i.e., log to a file as well as stderr, stdout
logDir=$(python -c "import json,os,sys; d=json.load(open(sys.argv[1])); print os.path.abspath(d['pacBioSystem']['logDir'])" ${SL_SERVICES_CONF})
logStartFile=${logDir}/bundle-start.log


echo "Attempting to apply-config"
python ${__dir}/apply-config
echo "completed applying config"


check_port() {
   local port=$1; shift;

   local netstat_available;

   if ! which netstat > /dev/null 2>&1 ; then
	return;
   fi	

   local pidprogs;
   local act_pidprogs;
   pidprogs=$(netstat -l -n -p 2> /dev/null | awk -v pat=":$port" '$4 ~ pat {print $NF}' | sort -u)
   if [[ ! -z "$pidprogs" ]] ; then
       act_pidprogs=$(echo $(echo "$pidprogs" | grep -E -v '^-$'))
       if [[ -z "$act_pidprogs" ]] ; then
          echo "  Port '$port' already in use (by unknown pid/prog)"
       else
          echo "  Port '$port' already in use (by pid/prog: $act_pidprogs)"
       fi
       echo "Daemons not started, exiting."
       exit 4;
   fi
}


echo "Checking SMRT Link services daemon..."
if [ -f ${SL_SERVICES_PID} ]; then
   PID=`cat ${SL_SERVICES_PID}`
   if [[ $PID =~ ^[0-9]+$ ]] ; then
      if kill -0 "$PID" > /dev/null 2>&1 ; then
         echo "SMRT Link Analysis java process already running: $SL_SERVICES_PID" 1>&2
         echo "Run services-stop or kill process '$PID', then rerun" 1>&2
         echo "SMRT Link Analysis services not started!" 1>&2
         exit 2;
      else
         # Stale pid file, remove it and continue on.
         echo "Removing SMRT Link Analysis services pid file for stale pid ($PID)..."
         rm -f "$SL_SERVICES_PID"
      fi
   else
      echo "Unrecognized pid ($PID) in pid file ($SL_SERVICES_PID)" 1>&2
      echo "Services not started!" 1>&2
      exit 3
   fi
fi
echo "completed checking SMRT Link Analysis services daemon"


echo "Checking tomcat GUI webserver daemon..."

# Quick check to determine if tomcat is running.  
tomcat_running=false;
if [[ ! -z ${CATALINA_PID+set} ]] && [[ -f "$CATALINA_PID" ]]; then
   pid=$(cat "$CATALINA_PID")
   if [[ $pid =~ ^[0-9]+$ ]] ; then
      if kill -0 "$pid" > /dev/null 2>&1; then     
         tomcat_running=true;
      fi
   fi
fi

# If tomcat is not running, check that all the tomcat ports are not in use.
# If tomcat is running, do not check the ports and let the normal tomcat
# startup fail below.
if ! $tomcat_running; then
   ports=$(cat $TOMCAT_DIR/conf/server.xml | \
	   sed -e 's/<!--.*-->//'| \
           sed -e '/<!--/,/-->/d' | \
           sed -n -e 's/.*[[:space:]]port="\([0-9]\+\)".*/\1/p' | \
           sort -u)
   for port in $ports; do
      check_port "$port"
   done
fi

# Fire up the services
echo "Starting SL Analysis services daemon..."
java ${SL_SERVICES_JVM_ARGS} \
     -Dconfig.file=${SL_SERVICES_CONF} \
     -jar ${SL_SERVICES_JAR} \
     ${SL_SERVICES_LOG_ARGS} \
     > ${SL_SERVICES_STDOUT} \
     2> ${SL_SERVICES_STDERR} &

sl_services_pid=$!
echo ${sl_services_pid} >${SL_SERVICES_PID}
echo "Started up SMRT Link Analysis services on PID ${sl_services_pid}"

# Should get-status be called here?
# This will raise if the SL Analysis services aren't started yet.
# This might be clearer to error out here, than startup the other
# components? get-status should be extended to be able to
# get the status a specific SL subcomponent
${__dir}/get-status --subcomponent-id smrtlink-analysis


# Fire up the GUI webserver
echo "Attempting to start tomcat GUI webserver daemon..."
${TOMCAT_DIR}/bin/startup.sh
echo "started up tomcat GUI webserver"

echo "Attempting to start WSO2 API Manager..."
bash ${WSO2_DIR}/bin/wso2server.sh --start
echo "started up WSO2 API Manager"

echo "Attempting to configure API Manager for SL Analysis backend..."
java -cp ${SL_SERVICES_JAR} \
     -Xmx256m -Xms256m \
     -Dconfig.file=${SL_SERVICES_CONF} \
     com.pacbio.secondary.smrtserver.tools.AmClientApp \
     set-api --swagger-resource /smrtlink_swagger.json \
     --app-config ${TOMCAT_DIR}/webapps/ROOT/app-config.json \
     --user admin --pass admin --host localhost \
     && echo "configured API Manager for SL Analysis backend"

echo "Completed starting the SMRT Link services, tomcat UI server and WSO2 API Manager"
