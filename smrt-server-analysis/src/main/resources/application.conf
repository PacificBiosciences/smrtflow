// Pacbio Config
smrtflow {

  // This is still inconsistent and a mess. This needs
  // to be updated to use a consistent naming schema
  // and abandinging the PB_* prefix (or atleast minimizing the PB_* usage
  // for backward compatibility)
  server {
    host = "0.0.0.0"
    host = ${?PB_SERVICES_HOST}
    port = 8070
    port = ${?PB_SERVICES_PORT}

    // load versions of other components, SL and SL UI
    manifestFile = ${?PB_SERVICES_MANIFEST_FILE}
  }

  engine {
    # This container has a case class EngineConfig
    # The options provided as ${?ENV_VAR_NAME} can be supplied as env vars
    # Max number of Concurrent JobType (pbsmrtpipe, import-dataset, ...) Workers
    maxWorkers = 35
    maxWorkers = ${?PB_ENGINE_MAX_WORKERS}

    # Root directory where all the jobs will reside
    jobRootDir = jobs-root
    jobRootDir = ${?PB_ENGINE_JOB_ROOT}

    # Enable debug mode for jobs
    debug-mode = false
    debug-mode = ${?PB_ENGINE_DEBUG_MODE}

    # The services only have a depenency on three external exes; pbsmrtpipe, sawriter, and samtools
    # Path to setup.sh PB_TOOLS_ENV This will be invoked before the pbsmrtpipe
    # process is called and passed to the exes
    # source /path/to/pb-tools-env.sh && samtools ...
    # if no value is provided, it will assume these processes will be invoked
    # as a child from the parent ENV
    # default of None
    pb-tools-env = ${?PB_TOOLS_ENV}
    # Path to pbsmrtpipe Preset XML
    pbsmrtpipePresetXml = ${?PB_SMRTPIPE_XML_PRESET}

    # Path to the CMD Template file which can be used to call pbsmrtpipe,
    # The template must have the form "bash ${CMD}" (see the "cluster" template for details)
    pb-cmd-template = ${?PB_CMD_TEMPLATE}
  }
}

akka {
  loglevel = DEBUG
  log-dead-letters = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  jvm-exit-on-fatal-error = off
  #log-config-on-start = on
  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      #receive = on
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      #autoreceive = on
    }
  }
}

spray.servlet {

  # The FQN (Fully Qualified Name) of the class to load when the
  # servlet context is initialized (e.g. "com.example.ApiBoot").
  # The class must have a constructor with a single
  # `javax.servlet.ServletContext` parameter and implement
  # the `spray.servlet.WebBoot` trait.
  boot-class = "com.pacbio.secondary.SecondaryAnalysisWebServlet"

  # If a request hasn't been responded to after the time period set here
  # a `spray.http.Timedout` message will be sent to the timeout handler.
  # Set to `infinite` to completely disable request timeouts.
  request-timeout = 30 s

  # After a `Timedout` message has been sent to the timeout handler and the
  # request still hasn't been completed after the time period set here
  # the server will complete the request itself with an error response.
  # Set to `infinite` to disable timeout timeouts.
  timeout-timeout = 500 ms

  # The path of the actor to send `spray.http.Timedout` messages to.
  # If empty all `Timedout` messages will go to the "regular" request handling actor.
  timeout-handler = ""

  # A path prefix that is automatically "consumed" before the request is
  # being dispatched to the HTTP service route.
  # Can be used to match servlet context paths configured for the application.
  # Make sure to include a leading slash with your prefix, e.g. "/foobar".
  # Set to `AUTO` to make spray-servlet pick up the ServletContext::getContextPath.
  root-path = AUTO

  # Enables/disables the addition of a `Remote-Address` header
  # holding the clients (remote) IP address.
  remote-address-header = off

  # Enables/disables the returning of more detailed error messages to
  # the client in the error response.
  # Should be disabled for browser-facing APIs due to the risk of XSS attacks
  # and (probably) enabled for internal or non-browser APIs.
  # Note that spray will always produce log messages containing the full error details.
  verbose-error-messages = off

  # The maximum size of the request entity that is still accepted by the server.
  # Requests with a greater entity length are rejected with an error response.
  # Must be greater than zero.
  max-content-length = 5 m

  # Enables/disables the inclusion of `spray.servlet.ServletRequestInfoHeader` in the
  # headers of the HTTP request sent to the service actor.
  servlet-request-access = off

  # Enables/disables the logging of warning messages in case an incoming
  # message (request or response) contains an HTTP header which cannot be
  # parsed into its high-level model class due to incompatible syntax.
  # Note that, independently of this settings, spray will accept messages
  # with such headers as long as the message as a whole would still be legal
  # under the HTTP specification even without this header.
  # If a header cannot be parsed into a high-level model instance it will be
  # provided as a `RawHeader`.
  illegal-header-warnings = on

  # Sets the strictness mode for parsing request target URIs.
  # The following values are defined:
  #
  # `strict`: RFC3986-compliant URIs are required,
  #     a 400 response is triggered on violations
  #
  # `relaxed`: all visible 7-Bit ASCII chars are allowed
  #
  # `relaxed-with-raw-query`: like `relaxed` but additionally
  #     the URI query is not parsed, but delivered as one raw string
  #     as the `key` value of a single Query structure element.
  #
  uri-parsing-mode = relaxed
}

spray.can {
  client {
    parsing {
      max-content-length: 64M
    }
  }
  server {
    registration-timeout: 10 s
  }
}
